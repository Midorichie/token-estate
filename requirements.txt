# requirements.txt
fastapi==0.104.1
uvicorn==0.24.0
pydantic==2.4.2
python-multipart==0.0.6
python-jose==3.3.0
passlib==1.7.4

# main.py
from fastapi import FastAPI, HTTPException, Depends, status
from pydantic import BaseModel
from typing import List, Optional
from decimal import Decimal
from uuid import UUID
from datetime import datetime

app = FastAPI(title="TokenEstate API")

class PropertyCreate(BaseModel):
    address: str
    total_value: Decimal
    total_tokens: int
    square_feet: int
    year_built: int
    property_type: str
    description: str
    images: List[str]

class TradeCreate(BaseModel):
    property_id: UUID
    tokens: int
    price_per_token: Decimal

class PropertyResponse(BaseModel):
    id: UUID
    address: str
    total_value: Decimal
    total_tokens: int
    tokens_available: int
    price_per_token: Decimal
    metadata: dict

class TradeResponse(BaseModel):
    id: UUID
    property_id: UUID
    seller_id: UUID
    buyer_id: Optional[UUID]
    tokens: int
    price_per_token: Decimal
    status: str
    created_at: datetime
    updated_at: datetime

@app.post("/properties", response_model=PropertyResponse)
async def create_property(property_data: PropertyCreate):
    """Tokenize a new property"""
    # Implementation will connect to Rust backend
    pass

@app.get("/properties", response_model=List[PropertyResponse])
async def list_properties():
    """List all tokenized properties"""
    pass

@app.get("/properties/{property_id}", response_model=PropertyResponse)
async def get_property(property_id: UUID):
    """Get details of a specific property"""
    pass

@app.post("/trades", response_model=TradeResponse)
async def create_trade(trade_data: TradeCreate):
    """Create a new trade listing"""
    pass

@app.post("/trades/{trade_id}/execute")
async def execute_trade(trade_id: UUID):
    """Execute an existing trade"""
    pass

@app.get("/market-analysis/{property_id}")
async def get_market_analysis(property_id: UUID):
    """Get market analysis for a property"""
    pass

# models.py
from sqlalchemy import Column, Integer, String, Numeric, DateTime, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

class Property(Base):
    __tablename__ = "properties"
    
    id = Column(UUID(as_uuid=True), primary_key=True)
    address = Column(String, nullable=False)
    total_value = Column(Numeric, nullable=False)
    total_tokens = Column(Integer, nullable=False)
    tokens_available = Column(Integer, nullable=False)
    price_per_token = Column(Numeric, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class TokenHolder(Base):
    __tablename__ = "token_holders"
    
    id = Column(UUID(as_uuid=True), primary_key=True)
    wallet_address = Column(String, nullable=False, unique=True)
    created_at = Column(DateTime, default=datetime.utcnow)

class Trade(Base):
    __tablename__ = "trades"
    
    id = Column(UUID(as_uuid=True), primary_key=True)
    property_id = Column(UUID(as_uuid=True), ForeignKey("properties.id"))
    seller_id = Column(UUID(as_uuid=True), ForeignKey("token_holders.id"))
    buyer_id = Column(UUID(as_uuid=True), ForeignKey("token_holders.id"), nullable=True)
    tokens = Column(Integer, nullable=False)
    price_per_token = Column(Numeric, nullable=False)
    status = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)